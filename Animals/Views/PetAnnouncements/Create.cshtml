@model Animals.Models.PetAnnouncement

<!DOCTYPE html>
@*@if (TempData["Breeds"] != null)
    {
        // todo: altta elle girdigim breeds arrayini dinamik olarak basmaya calis
        var breedList = (List<Animals.Models.PetBreed>)TempData["Breeds"];

    }*@
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Create</title>
</head>
<body>
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

    @using (Html.BeginForm("Create", "PetAnnouncements", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="container pb-5 form-horizontal">
            <h4>PetAnnouncement</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                <label for="type" class="text-center">Evcil Hayvanın Türü</label>
                <div class="col-md-10">
                    @Html.DropDownList("TypeId", null, new { htmlAttributes = new { @class = "typeList form-control", id = "typeList" } })
                    @Html.ValidationMessageFor(model => model.TypeId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="text-center">Evcil Hayvanın Cinsi</label>
                <div class="col-md-10">
                    <select id="select" name="BreedId">
                        <option value="default"></option>
                    </select>
                </div>
            </div>
            <script>
                //// var breeds = [1,2,3,4,5];
                //var breeds = [{
                //    IdofType: 1,
                //    Breed: 'Bear',
                //    BreedID: 4324
                //},{
                //    IdofType: 2,
                //    Breed: 'Seagull',
                //    BreedID: 7786
                @*var breeds = ("@((List<Animals.Models.PetBreed>)TempData["Breeds"])");*@

                window.addEventListener('load', function () {
                const pet = document.getElementById('TypeId');
                const petType = document.getElementById("select");
                pet.addEventListener('change', (event) => {
                    console.log(event.target.value);
                    $("#select").empty();
                    $.ajax({
                    url: "@Url.Action("GetBreeds")",
                    dataType: "json",
                    data: {
                        petType: event.target.value
                    },
                    type: "Post",
                        success: function (breeds) {
                            $.each(breeds, function (i, breed) {
                                $("#select").append('<option value="' + breed.Value + '">' +
                                    breed.Text + '</option>');
                            });
                        }
                });
                    });
                });
                        //const selectedAnimalArray = ("breeds").filter((breed) => breed.IdofType == +event.target.value );
                        //const selectedAnimal = selectedAnimalArray[0];
                        //const option = document.createElement("option"),
                        //    txt = document.createTextNode(selectedAnimal.Breed);

                        //option.appendChild(txt);
                        //option.setAttribute("value", selectedAnimal.BreedID)
                        //petType.insertBefore(option, petType.lastChild);
                // $(document).ready(function () {
                //     $("#TypeId").change(function () {
                //         var petType = document.getElementById("select");
                //         breeds.forEach(function (element) {
                //             if ($(this).val() == element.IdofType) {
                //                 var option = document.createElement("OPTION"),
                //                     txt = document.createTextNode(element.Breed);
                //                 option.appendChild(txt);
                //                 option.setAttribute("value", element.BreedID)
                //                 petType.insertBefore(option, petType.lastChild);
                //             }
                //         });
                //     });
                // });
            </script>

            <div class="form-group">
                <label for="age" class="text-center">Evcil Hayvanın Yaşı</label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label for="city" class="text-center">Şehir</label>
                <div class="col-md-10">
                    @Html.DropDownList("CityId", null, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                <label for="photo" class="text-center">Evcil Hayvanın Fotoğrafı</label>
                <div class="col-md-10">
                    <input type="file" name="Photo" />
                    @Html.ValidationMessage("Photo", "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label for="title" class="text-center">Başlık</label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                <label for="explanation" class="text-center">Açıklama</label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Explanation, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Explanation, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                    @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.Active)
                            @Html.ValidationMessageFor(model => model.Active, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>*@

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</body>
</html>
